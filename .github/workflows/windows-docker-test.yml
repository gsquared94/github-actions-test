# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Installs docker
    - name: Install Docker Desktop
      run: |
        choco install -ydf docker-desktop
    
    # Restart Docker service (from: https://stackoverflow.com/a/57560043)
    - name: Restart Docker service
      run: |
        Write-Output "$((Get-Date).ToString("HH:mm:ss")) - Restarting docker"
        foreach($svc in (Get-Service | Where-Object {$_.name -ilike "*docker*" -and $_.Status -ieq "Running"})) {
        $svc | Stop-Service -ErrorAction Continue -Confirm:$false -Force
        $svc.WaitForStatus('Stopped','00:00:20')}

        Get-Process | Where-Object {$_.Name -ilike "*docker*"} | Stop-Process -ErrorAction Continue -Confirm:$false -Force

        foreach($svc in (Get-Service | Where-Object {$_.name -ilike "*docker*" -and $_.Status -ieq "Stopped"} )) {
        $svc | Start-Service 
        $svc.WaitForStatus('Running','00:00:20')}

        Write-Output "$((Get-Date).ToString("HH:mm:ss")) - Starting Docker Desktop"
        & "C:\Program Files\Docker\Docker\Docker Desktop.exe"
        $startTimeout = [DateTime]::Now.AddSeconds(90)
        $timeoutHit = $true
        while ((Get-Date) -le $startTimeout) {
        Start-Sleep -Seconds 10
        $ErrorActionPreference = 'Continue'
        try {
        $info = (docker info)
        Write-Verbose "$((Get-Date).ToString("HH:mm:ss")) - `tDocker info executed. Is Error?: $($info -ilike "*error*"). Result was: $info"

        if ($info -ilike "*error*") {
        Write-Verbose "$((Get-Date).ToString("HH:mm:ss")) - `tDocker info had an error. throwing..."
        throw "Error running info command $info" }
        $timeoutHit = $false
        break }
        catch {
        if (($_ -ilike "*error during connect*") -or ($_ -ilike "*errors pretty printing info*")  -or ($_ -ilike "*Error running info command*"))
        {
        Write-Output "$((Get-Date).ToString("HH:mm:ss")) -`t Docker Desktop startup not yet completed, waiting and checking again"
        }
        else
        {
        Write-Output "Unexpected Error: `n $_"
        return
        }
        }
        $ErrorActionPreference = 'Stop'
        }
        if ($timeoutHit -eq $true)
        {
        throw "Timeout hit waiting for docker to startup"
        }
        Write-Output "$((Get-Date).ToString("HH:mm:ss")) - Docker restarted"
    
    # Switches Docker to run linux containers
    - name: Switch to Linux containers
      run: |
        & "C:\Program Files\Docker\Docker\DockerCli.exe" -SwitchLinuxEngine
    
    #Starts Kind cluster in linux container
    - name: Start Kind cluster
      run: |
        kind create cluster
